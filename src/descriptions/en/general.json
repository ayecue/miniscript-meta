{
    "hasIndex": {
        "description": "Depending on data type this function checks if the provided index is available inside the value. To get a better idea about the behaviour look into the `hasIndex` methods related to `string`, `list` and `map`.",
        "example": [
            "print(\"List has index: \" + hasIndex([1, 2, 3], 2)"
        ]
    },
    "print": {
        "description": "Print a message on the Terminal. Optionally replacing can be enabled which will replace the previous print. This can be useful for creating a loading bar for example. There is also the possibility of styling output by using TextMeshPro rich-text tags.",
        "example": [
            "for i in range(9)",
            "   print((\"#\" * (9 - i)) + (\"-\" * i) , true)",
            "   wait(0.2)",
            "end for"
        ]
    },
    "indexes": {
        "description": "Depending on data type this function returns a `list` with all available indexes. To get a better idea about the behaviour look into the `indexes` methods related to `string`, `list` and `map`.",
        "example": [
            "indexesOfStr = indexes(\"test\")",
            "print(\"Following indexes are available: \" + indexesOfStr.join(\", \"))"
        ]
    },
    "values": {
        "description": "Depending on data type this function returns a `list` with all available values. To get a better idea about the behaviour look into the `values` methods related to `string`, `list` and `map`.",
        "example": [
            "indexesOfStr = values(\"test\")",
            "print(\"Following values are available: \" + indexesOfStr.join(\", \"))"
        ]
    },
    "indexOf": {
        "description": "Depending on the data type this function searches for the index of the provided value. To get a better idea about the behaviour look into the `indexOf` methods related to `string`, `list` and `map`.",
        "example": [
            "index = indexOf(\"test\", \"e\")",
            "print(\"e is at: \" + index)"
        ]
    },
    "len": {
        "description": "Depending on data type this function returns the length of the provided value. To get a better idea about the behaviour look into the `len` methods related to `string`, `list` and `map`.",
        "example": [
            "length = len(\"test\")",
            "print(\"Length of string is: \" + length)"
        ]
    },
    "shuffle": {
        "description": "Depending on data type this function will shuffle data. Instead of returning the newly shuffled data, this function will mutate the data. To get a better idea about the behaviour look into the `shuffle` methods related to `list` and `map`.",
        "example": [
            "list = [0, 1, 2, 3, 4, 5]",
            "shuffle(list)",
            "print(\"And the winner is: \" + list[0])"
        ]
    },
    "val": {
        "description": "Casts a `string` to a `number`. In case the provided `string` does not represent a valid `number` the `number` zero will get returned.",
        "example": [
            "num = val(\"1.25\")",
            "print(\"Number in string is: \" + num)"
        ]
    },
    "lower": {
        "description": "Returns a `string` which is the lowercase transformed version of the provided `string`.",
        "example": [
            "myString = lower(\"HELLO WORLD\")",
            "print(myString)"
        ]
    },
    "upper": {
        "description": "Returns a `string` which is the uppercase transformed version of the provided `string`.",
        "example": [
            "myString = upper(\"hello world\")",
            "print(myString)"
        ]
    },
    "sum": {
        "description": "Depending on data type this function returns the sum of all items. To get a better idea about the behaviour look into the `sum` methods related to `list` and `map`.",
        "example": [
            "list = [0, 1, 2, 3, 4, 5]",
            "print(\"Sum of all items is: \" + sum(list))"
        ]
    },
    "pop": {
        "description": "Depending on data type this function will return the last item in the provided value. Additionally, this function removes the last item and therefore mutates the object. To get a better idea about the behaviour look into the `pop` methods related to `list` and `map`.",
        "example": [
            "list = [0, 1, 2, 3, 4, 5]",
            "print(\"The last item is: \" + pop(list))"
        ]
    },
    "pull": {
        "description": "Depending on data type this function will return the first item in the provided value. Additionally, this function removes the first item and therefore mutates the object. To get a better idea about the behaviour look into the `pull` methods related to `list` and `map`.",
        "example": [
            "list = [0, 1, 2, 3, 4, 5]",
            "print(\"The first item is: \" + pull(list))"
        ]
    },
    "push": {
        "description": "Depending on data type this function will append a value to the provided object. As a result, the object will get mutated. To get a better idea about the behaviour look into the `push` methods related to `list` and `map`.",
        "example": [
            "list = [0, 1, 2, 3, 4, 5]",
            "push(list, 42)",
            "print(\"The answer to everything is: \" + pop(list))"
        ]
    },
    "sort": {
        "description": "Depending on the data type this function will sort the values in the provided object. As a result, the object will get mutated. To get a better idea about the behaviour look into the `sort` methods related to `list` and `map`.",
        "example": [
            "list = [9, 3, 5, 7]",
            "sort(list)",
            "print(\"Sorted list: \" + list.join(\", \"))"
        ]
    },
    "remove": {
        "description": "Depending on the data type this function will remove a value in the provided object. As a result, the object will get mutated. To get a better idea about the behaviour look into the `remove` methods related to `list` and `map`.",
        "example": [
            "list = [9, 3, 5, 7]",
            "remove(list, 5)",
            "print(\"List after removal: \" + list.join(\", \"))"
        ]
    },
    "wait": {
        "description": "Puts script execution on hold. Optionally the duration can be provided via the time argument. By default, the duration will be 1 second. The duration cannot be below 0.01 or above 300.",
        "example": [
            "start = time",
            "wait(5)",
            "elapsed = time - start",
            "print(\"Waited: \" + elapsed)"
        ]
    },
    "bitwise": {
        "description": "Enables to perform bitwise operations. Supported operators are: `\"&\"`, `\"|\"`, `\"^\"`, `\"<<\"`, `\">>\"`, `\">>>\"`. Returns a `number`.",
        "example": [
            "num = params[0].to_int",
            "isOdd = bitwise(\"&\", num, 1) == 1",
            "if isOdd then",
            "   print(\"Number is odd.\")",
            "else",
            "   print(\"Number is even.\")",
            "end if"
        ]
    },
    "abs": {
        "description": "Returns the absolute value of `number`.",
        "example": [
            "a = 1",
            "b = 5",
            "difference = abs(a - b)",
            "print(\"Difference between a and b is: \" + difference)"
        ]
    },
    "acos": {
        "description": "Returns the inverse cosine (in radians) of a `number`.",
        "example": [
            "adjacent = 8",
            "hypotenuse = 10",
            "calcAngle = acos(adjacent / hypotenuse)",
            "print(\"Angle: \" + calcAngle)"
        ]
    },
    "asin": {
        "description": "Returns the inverse sine (in radians) of a `number`.",
        "example": [
            "opposite = 6",
            "hypotenuse = 10",
            "calcAngle = acos(opposite / hypotenuse)",
            "print(\"Angle: \" + calcAngle)"
        ]
    },
    "atan": {
        "description": "Returns the inverse tangent (in radians) of a `number`.",
        "example": [
            "opposite = 8",
            "hypotenuse = 10",
            "calcAngle = atan(opposite / hypotenuse)",
            "print(\"Angle: \" + calcAngle)"
        ]
    },
    "tan": {
        "description": "Returns the tangent of a `number` in radians.",
        "example": [
            "degrees = 90",
            "tanFromDegrees = tan(degress * pi / 180)",
            "print(\"Tan from degrees: \" + tanFromDegrees)"
        ]
    },
    "cos": {
        "description": "Returns the cosine of a `number` in radians.",
        "example": [
            "radians = 1",
            "radius = 10",
            "circleX = cos(radians) * radius",
            "print(circleX)"
        ]
    },
    "code": {
        "description": "Returns the Unicode `number` of the first character of the string. In case an empty `string` is provided the script execution will crash.",
        "example": [
            "key = user_input(\"Press a key!\", false, true)",
            "isA = key.code == 97",
            "if isA then",
            "   print(\"You pressed A.\")",
            "else",
            "   print(\"You did not press A.\")",
            "end if"
        ]
    },
    "char": {
        "description": "Returns the Unicode character `string` related to the provided unicode `number`. The provided `number` needs to be between 0 and 65535. Any `number` which is outside this range will cause the script to throw a runtime error.",
        "example": [
            "key = user_input(\"Press a key!\", false, true)",
            "isA = key == char(97)",
            "if isA then",
            "   print(\"You pressed A.\")",
            "else",
            "   print(\"You did not press A.\")",
            "end if"
        ]
    },
    "sin": {
        "description": "Returns the sine of a `number` in radians.",
        "example": [
            "radians = 1",
            "radius = 10",
            "circleY = sin(radians) * radius",
            "print(circleY)"
        ]
    },
    "floor": {
        "description": "Returns `number` rounded down to the integer value of the provided `number`.",
        "example": [
            "price = 25.43467",
            "floored = floor(price * 100) / 100",
            "print(\"Floored price: \" + floored)"
        ]
    },
    "range": {
        "description": "Returns a `list` where each item is a `number`. By default, the `list` starts with the `number` zero and increments by one for each item. Optionally start and end can be defined. Additionally, the incremental value can be changed as well. In case the incremental value is zero this function will throw a runtime error.",
        "example": [
            "print(\"Countdown:\")",
            "for num in range(10)",
            "   print(num)",
            "end for",
            "print(\"Done!\")"
        ]
    },
    "round": {
        "description": "Returns `number` rounded to the integer value of the provided `number`.",
        "example": [
            "price = 25.43467",
            "rounded = round(price * 100) / 100",
            "print(\"Price: \" + rounded)"
        ]
    },
    "rnd": {
        "description": "Returns a random `number` between 0 and 1. Optionally a seed `number` can be provided.",
        "example": [
            "min = 10",
            "max = 20",
            "output = floor(rnd * (max - min + 1) + min)",
            "input = user_input(\"Guess a number between 10 and 20!\").to_int",
            "if (input == output) then",
            "   print(\"You guessed right!\")",
            "else",
            "   print(\"You failed! The number was \" + output)",
            "end if"
        ]
    },
    "sign": {
        "description": "Returns a one or minus one, indicating the sign of the number passed as argument. If the input is zero, it will be returned as-is.",
        "example": [
            "print(sign(40))",
            "print(sign(-40))",
            "print(sign(0))"
        ]
    },
    "sqrt": {
        "description": "Returns the square root of a `number`.",
        "example": [
            "a = 3",
            "b = 4",
            "calcHypotenuse = sqrt((a * a) + (b * b))",
            "print(\"Hypotenuse: \" + calcHypotenuse)"
        ]
    },
    "str": {
        "description": "Returns the `string` value of provided data. Can be used to turn a `number` into a `string` or to get the signature of a `function`.",
        "example": [
            "signature = str(@user_input)",
            "argSegment = signature[9:signature.len - 1]",
            "args = argSegment.split(\",\")",
            "print(\"Function has \" + args.len + \" arguments.\")"
        ]
    },
    "ceil": {
        "description": "Returns `number` rounded up to the integer value of the provided `number`.",
        "example": [
            "price = 25.43467",
            "upperPrice = ceil(price * 100) / 100",
            "print(\"Upper price: \" + upperPrice)"
        ]
    },
    "pi": {
        "description": "Returns the `number` PI to the precision of six.",
        "example": [
            "radius = 10",
            "circumference = 2 * pi * radius",
            "print(\"Circumference: \" + circumference)"
        ]
    },
    "slice": {
        "description": "Returns a sliced `list`. Valid data types for slicing are `string` and `list`. The returned `list` will contain all elements related to the provided start and end index.",
        "example": [
            "myString = \"not your text\"",
            "print(\"my \" + slice(myString, 9))"
        ]
    },
    "hash": {
        "description": "Returns numeric hash for the provided data.",
        "example": [
            "hashA = hash({ \"a\": 2, \"b\": 1 })",
            "hashB = hash({ \"b\": 1, \"a\": 2 })",
            "if (hashA == hashB) then",
            "   print(\"Objects are alike!\")",
            "else",
            "   print(\"Objects are different!\")",
            "end if"
        ]
    },
    "time": {
        "description": "Returns a `number` of seconds representing the elapsed time since the script got started.",
        "example": [
            "start = time",
            "for i in range(10000)",
            "   var = i * 100",
            "end for",
            "endTime = time - start",
            "print(\"Script execution done within: \" + endTime)"
        ]
    },
    "bitAnd": {
        "description": "Performs a bitwise AND for the provided values. Returns a `number`.",
        "example": [
            "print(\"Result of bitwise AND: \" + bitAnd(1, 2))"
        ]
    },
    "bitOr": {
        "description": "Performs a bitwise OR for the provided values. Returns a `number`.",
        "example": [
            "print(\"Result of bitwise OR: \" + bitOr(1, 2))"
        ]
    },
    "bitXor": {
        "description": "Permorms a bitwise XOR for the provided values. Returns a `number`.",
        "example": [
            "print(\"Result of bitwise XOR: \" + bitXor(1, 2))"
        ]
    },
    "log": {
        "description": "Returns the natural logarithm of a `number`. By default, the base is 10. Optionally the base can be changed.",
        "example": [
            "a = 2",
            "b = 8",
            "baseLog = log(a) / log(b)",
            "print(\"Base log is: \" + baseLog)"
        ]
    },
    "yield": {
        "description": "Waits for the next tick.",
        "example": [
            "while (true)",
            "   yield",
            "   print(\"tick\")",
            "end while"
        ]
    },
    "get_custom_object": {
        "description": "Returns `map` which is shared throughout all script executions. Can be helpful in case forwarding an entity is desired.",
        "example": [
            "get_custom_object.shouldEndScript = false",
            "while (get_custom_object.shouldEndScript)",
            "   print(\"Waiting...\")",
            "   wait(2)",
            "end while"
        ]
    },
    "insert": {
        "description": "Depending on the data type this function will insert a value to the provided index. Due to the insertion, the object will be mutated. To get a better idea about the behaviour look into the `insert` method related to `list` or `string`.",
        "example": [
            "list = [2, 3, 4]",
            "insert(list, 2, 42)",
            "print(\"List with inserted item: \" + list.join(\", \"))"
        ]
    },
    "to_int": {
        "description": "Returns a `number` which is parsed from the `string` as an integer. In case the `string` is not numeric it will return the original `string`.",
        "example": [
            "myString = \"1\"",
            "print(to_int(myString) + 41)"
        ]
    },
    "join": {
        "description": "Returns a concatenated `string` containing all stringified values inside the `list`. These values will be separated via the provided separator.",
        "example": [
            "myList = [42, 1, 3]",
            "print(join(myList, \" .-*'*-. \"))"
        ]
    },
    "split": {
        "description": "Returns a `list` where each item is a segment of the `string`. The separation depends on the provided separator `string`. Keep in mind that for some odd reason, this method is using regular expressions for matching.",
        "example": [
            "myString = \"42 as an answer is wrong\"",
            "segments = split(myString, \" \")",
            "if segments[0] != \"42\" then",
            "   print(\"Invalid information spotted!\")",
            "else",
            "   print(\"Information seems valid!\")",
            "end if"
        ]
    },
    "replace": {
        "description": "Depending on the data type this function will replace a value in the provided object. Due to the replacement, the object might get mutated. To get a better idea about the behaviour look into the `replace` method related to `map`, `list` or `string`.",
        "example": [
            "myString = \"42 as an answer is wrong\"",
            "newString = replace(myString, \"wrong\", \"right\")",
            "print(newString)"
        ]
    }
}